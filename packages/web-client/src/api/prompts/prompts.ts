/**
 * Generated by orval v6.26.0 üç∫
 * Do not edit manually.
 * insureai
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  CreatePromptRequest,
  HTTPValidationError,
  Prompt,
  PromptsGetPromptsParams,
  UpdatePromptRequest
} from '.././schemas'
import { customInstance } from '.././mutator/axios';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * Create a new prompt.

Args:
    req (CreatePromptRequest): The request object containing the prompt details.
    user_ctx (UserContextDep): The user context object.
    prompt_service (PromptServiceDep): The prompt service dependency.

Returns:
    The created prompt.
 * @summary Create Prompt
 */
export const promptsCreatePrompt = (
    createPromptRequest: CreatePromptRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<Prompt>(
      {url: `/v1/prompts`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createPromptRequest
    },
      options);
    }
  


export const getPromptsCreatePromptMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof promptsCreatePrompt>>, TError,{data: CreatePromptRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof promptsCreatePrompt>>, TError,{data: CreatePromptRequest}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof promptsCreatePrompt>>, {data: CreatePromptRequest}> = (props) => {
          const {data} = props ?? {};

          return  promptsCreatePrompt(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PromptsCreatePromptMutationResult = NonNullable<Awaited<ReturnType<typeof promptsCreatePrompt>>>
    export type PromptsCreatePromptMutationBody = CreatePromptRequest
    export type PromptsCreatePromptMutationError = HTTPValidationError

    /**
 * @summary Create Prompt
 */
export const usePromptsCreatePrompt = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof promptsCreatePrompt>>, TError,{data: CreatePromptRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof promptsCreatePrompt>>,
        TError,
        {data: CreatePromptRequest},
        TContext
      > => {

      const mutationOptions = getPromptsCreatePromptMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Retrieves prompts for a given branch.

Args:
    branch_id (str): The ID of the branch.
    user_ctx (UserContextDep): The user context.
    prompt_service (PromptServiceDep): The prompt service.

Returns:
    List[Prompt]: A list of prompts for the given branch.
 * @summary Get Prompts
 */
export const promptsGetPrompts = (
    params: PromptsGetPromptsParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Prompt[]>(
      {url: `/v1/prompts`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getPromptsGetPromptsQueryKey = (params: PromptsGetPromptsParams,) => {
    return [`/v1/prompts`, ...(params ? [params]: [])] as const;
    }

    
export const getPromptsGetPromptsQueryOptions = <TData = Awaited<ReturnType<typeof promptsGetPrompts>>, TError = HTTPValidationError>(params: PromptsGetPromptsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof promptsGetPrompts>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPromptsGetPromptsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof promptsGetPrompts>>> = ({ signal }) => promptsGetPrompts(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof promptsGetPrompts>>, TError, TData> & { queryKey: QueryKey }
}

export type PromptsGetPromptsQueryResult = NonNullable<Awaited<ReturnType<typeof promptsGetPrompts>>>
export type PromptsGetPromptsQueryError = HTTPValidationError

/**
 * @summary Get Prompts
 */
export const usePromptsGetPrompts = <TData = Awaited<ReturnType<typeof promptsGetPrompts>>, TError = HTTPValidationError>(
 params: PromptsGetPromptsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof promptsGetPrompts>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getPromptsGetPromptsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Update a prompt with the given prompt_id.

Args:
    prompt_id (str): The ID of the prompt to update.
    req (UpdatePromptRequest): The request object containing the updated prompt data.
    user_ctx (UserContextDep): The user context dependency.
    prompt_service (PromptServiceDep): The prompt service dependency.

Returns:
    Prompt: The updated prompt object.

Raises:
    HTTPException: If the prompt with the given prompt_id is not found.
 * @summary Update Prompt
 */
export const promptsUpdatePrompt = (
    promptId: string,
    updatePromptRequest: UpdatePromptRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<Prompt>(
      {url: `/v1/prompts/${promptId}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: updatePromptRequest
    },
      options);
    }
  


export const getPromptsUpdatePromptMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof promptsUpdatePrompt>>, TError,{promptId: string;data: UpdatePromptRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof promptsUpdatePrompt>>, TError,{promptId: string;data: UpdatePromptRequest}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof promptsUpdatePrompt>>, {promptId: string;data: UpdatePromptRequest}> = (props) => {
          const {promptId,data} = props ?? {};

          return  promptsUpdatePrompt(promptId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PromptsUpdatePromptMutationResult = NonNullable<Awaited<ReturnType<typeof promptsUpdatePrompt>>>
    export type PromptsUpdatePromptMutationBody = UpdatePromptRequest
    export type PromptsUpdatePromptMutationError = HTTPValidationError

    /**
 * @summary Update Prompt
 */
export const usePromptsUpdatePrompt = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof promptsUpdatePrompt>>, TError,{promptId: string;data: UpdatePromptRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof promptsUpdatePrompt>>,
        TError,
        {promptId: string;data: UpdatePromptRequest},
        TContext
      > => {

      const mutationOptions = getPromptsUpdatePromptMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Retrieve a prompt by its ID.

Args:
    prompt_id (str): The ID of the prompt to retrieve.
    user_ctx (UserContextDep): The user context dependency.
    prompt_service (PromptServiceDep): The prompt service dependency.

Returns:
    The prompt object if found, otherwise raises a custom exception with status code 404.
 * @summary Get Prompt
 */
export const promptsGetPrompt = (
    promptId: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Prompt>(
      {url: `/v1/prompts/${promptId}`, method: 'GET', signal
    },
      options);
    }
  

export const getPromptsGetPromptQueryKey = (promptId: string,) => {
    return [`/v1/prompts/${promptId}`] as const;
    }

    
export const getPromptsGetPromptQueryOptions = <TData = Awaited<ReturnType<typeof promptsGetPrompt>>, TError = HTTPValidationError>(promptId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof promptsGetPrompt>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPromptsGetPromptQueryKey(promptId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof promptsGetPrompt>>> = ({ signal }) => promptsGetPrompt(promptId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(promptId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof promptsGetPrompt>>, TError, TData> & { queryKey: QueryKey }
}

export type PromptsGetPromptQueryResult = NonNullable<Awaited<ReturnType<typeof promptsGetPrompt>>>
export type PromptsGetPromptQueryError = HTTPValidationError

/**
 * @summary Get Prompt
 */
export const usePromptsGetPrompt = <TData = Awaited<ReturnType<typeof promptsGetPrompt>>, TError = HTTPValidationError>(
 promptId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof promptsGetPrompt>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getPromptsGetPromptQueryOptions(promptId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Delete a prompt by its ID.

Args:
    prompt_id (str): The ID of the prompt to delete.
    user_ctx (UserContextDep): The user context dependency.
    prompt_service (PromptServiceDep): The prompt service dependency.

Returns:
    DeleteResponse: The response indicating whether the prompt was successfully deleted.
 * @summary Delete Prompt
 */
export const promptsDeletePrompt = (
    promptId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/prompts/${promptId}`, method: 'DELETE'
    },
      options);
    }
  


export const getPromptsDeletePromptMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof promptsDeletePrompt>>, TError,{promptId: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof promptsDeletePrompt>>, TError,{promptId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof promptsDeletePrompt>>, {promptId: string}> = (props) => {
          const {promptId} = props ?? {};

          return  promptsDeletePrompt(promptId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PromptsDeletePromptMutationResult = NonNullable<Awaited<ReturnType<typeof promptsDeletePrompt>>>
    
    export type PromptsDeletePromptMutationError = HTTPValidationError

    /**
 * @summary Delete Prompt
 */
export const usePromptsDeletePrompt = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof promptsDeletePrompt>>, TError,{promptId: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof promptsDeletePrompt>>,
        TError,
        {promptId: string},
        TContext
      > => {

      const mutationOptions = getPromptsDeletePromptMutationOptions(options);

      return useMutation(mutationOptions);
    }
    