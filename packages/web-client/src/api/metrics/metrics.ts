/**
 * Generated by orval v6.26.0 üç∫
 * Do not edit manually.
 * insureai
 * OpenAPI spec version: 0.1.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  HTTPValidationError,
  MetricsGetCallMetricsTrendsParams,
  MetricsGetFunnelMetricsTrendsParams,
  MetricsGetMetricsGraphParams,
  MetricsGetMetricsParams
} from '.././schemas'
import { customInstance } from '.././mutator/axios';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * Retrieves metrics for a given branch.

Args:
    start_date (datetime): The start date of the metrics period.
    end_date (datetime): The end date of the metrics period.
    branch_id (str): The ID of the branch.
    user_ctx (UserContextDep): The user context.
    metrics_service (MetricsServiceDep): The metrics service.

Returns:
    funnel_metrics (dict): A dictionary containing the funnel metrics.
    call_metrics (dict): A dictionary containing the call metrics.
 * @summary Get Metrics
 */
export const metricsGetMetrics = (
    params: MetricsGetMetricsParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/metrics/counts`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getMetricsGetMetricsQueryKey = (params: MetricsGetMetricsParams,) => {
    return [`/v1/metrics/counts`, ...(params ? [params]: [])] as const;
    }

    
export const getMetricsGetMetricsQueryOptions = <TData = Awaited<ReturnType<typeof metricsGetMetrics>>, TError = HTTPValidationError>(params: MetricsGetMetricsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof metricsGetMetrics>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMetricsGetMetricsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof metricsGetMetrics>>> = ({ signal }) => metricsGetMetrics(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof metricsGetMetrics>>, TError, TData> & { queryKey: QueryKey }
}

export type MetricsGetMetricsQueryResult = NonNullable<Awaited<ReturnType<typeof metricsGetMetrics>>>
export type MetricsGetMetricsQueryError = HTTPValidationError

/**
 * @summary Get Metrics
 */
export const useMetricsGetMetrics = <TData = Awaited<ReturnType<typeof metricsGetMetrics>>, TError = HTTPValidationError>(
 params: MetricsGetMetricsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof metricsGetMetrics>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getMetricsGetMetricsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Retrieves metrics for a given branch.

Args:
    start_date (datetime): The start date of the metrics period.
    end_date (datetime): The end date of the metrics period.
    branch_id (str): The ID of the branch.
    user_ctx (UserContextDep): The user context.
    metrics_service (MetricsServiceDep): The metrics service.

Returns:
    call_graph_metrics (dict): A dictionary containing the call graph metrics.
 * @summary Get Metrics Graph
 */
export const metricsGetMetricsGraph = (
    params: MetricsGetMetricsGraphParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/metrics/graphs`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getMetricsGetMetricsGraphQueryKey = (params: MetricsGetMetricsGraphParams,) => {
    return [`/v1/metrics/graphs`, ...(params ? [params]: [])] as const;
    }

    
export const getMetricsGetMetricsGraphQueryOptions = <TData = Awaited<ReturnType<typeof metricsGetMetricsGraph>>, TError = HTTPValidationError>(params: MetricsGetMetricsGraphParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof metricsGetMetricsGraph>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMetricsGetMetricsGraphQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof metricsGetMetricsGraph>>> = ({ signal }) => metricsGetMetricsGraph(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof metricsGetMetricsGraph>>, TError, TData> & { queryKey: QueryKey }
}

export type MetricsGetMetricsGraphQueryResult = NonNullable<Awaited<ReturnType<typeof metricsGetMetricsGraph>>>
export type MetricsGetMetricsGraphQueryError = HTTPValidationError

/**
 * @summary Get Metrics Graph
 */
export const useMetricsGetMetricsGraph = <TData = Awaited<ReturnType<typeof metricsGetMetricsGraph>>, TError = HTTPValidationError>(
 params: MetricsGetMetricsGraphParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof metricsGetMetricsGraph>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getMetricsGetMetricsGraphQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Retrieves metrics trends for a given branch.

Args:
    start_date (datetime): The start date of the metrics period.
    end_date (datetime): The end date of the metrics period.
    branch_id (str): The ID of the branch.

Returns:
    funnel_trends (dict): A dictionary containing the funnel trends.
    call_trends (dict): A dictionary containing the call trends.
 * @summary Get Funnel Metrics Trends
 */
export const metricsGetFunnelMetricsTrends = (
    params: MetricsGetFunnelMetricsTrendsParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/metrics/trends/funnel`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getMetricsGetFunnelMetricsTrendsQueryKey = (params: MetricsGetFunnelMetricsTrendsParams,) => {
    return [`/v1/metrics/trends/funnel`, ...(params ? [params]: [])] as const;
    }

    
export const getMetricsGetFunnelMetricsTrendsQueryOptions = <TData = Awaited<ReturnType<typeof metricsGetFunnelMetricsTrends>>, TError = HTTPValidationError>(params: MetricsGetFunnelMetricsTrendsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof metricsGetFunnelMetricsTrends>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMetricsGetFunnelMetricsTrendsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof metricsGetFunnelMetricsTrends>>> = ({ signal }) => metricsGetFunnelMetricsTrends(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof metricsGetFunnelMetricsTrends>>, TError, TData> & { queryKey: QueryKey }
}

export type MetricsGetFunnelMetricsTrendsQueryResult = NonNullable<Awaited<ReturnType<typeof metricsGetFunnelMetricsTrends>>>
export type MetricsGetFunnelMetricsTrendsQueryError = HTTPValidationError

/**
 * @summary Get Funnel Metrics Trends
 */
export const useMetricsGetFunnelMetricsTrends = <TData = Awaited<ReturnType<typeof metricsGetFunnelMetricsTrends>>, TError = HTTPValidationError>(
 params: MetricsGetFunnelMetricsTrendsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof metricsGetFunnelMetricsTrends>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getMetricsGetFunnelMetricsTrendsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Retrieves metrics trends for a given branch.

Args:
    start_date (datetime): The start date of the metrics period.
    end_date (datetime): The end date of the metrics period.
    branch_id (str): The ID of the branch.

Returns:
    funnel_trends (dict): A dictionary containing the funnel trends.
    call_trends (dict): A dictionary containing the call trends.
 * @summary Get Call Metrics Trends
 */
export const metricsGetCallMetricsTrends = (
    params: MetricsGetCallMetricsTrendsParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/metrics/trends/call`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getMetricsGetCallMetricsTrendsQueryKey = (params: MetricsGetCallMetricsTrendsParams,) => {
    return [`/v1/metrics/trends/call`, ...(params ? [params]: [])] as const;
    }

    
export const getMetricsGetCallMetricsTrendsQueryOptions = <TData = Awaited<ReturnType<typeof metricsGetCallMetricsTrends>>, TError = HTTPValidationError>(params: MetricsGetCallMetricsTrendsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof metricsGetCallMetricsTrends>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMetricsGetCallMetricsTrendsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof metricsGetCallMetricsTrends>>> = ({ signal }) => metricsGetCallMetricsTrends(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof metricsGetCallMetricsTrends>>, TError, TData> & { queryKey: QueryKey }
}

export type MetricsGetCallMetricsTrendsQueryResult = NonNullable<Awaited<ReturnType<typeof metricsGetCallMetricsTrends>>>
export type MetricsGetCallMetricsTrendsQueryError = HTTPValidationError

/**
 * @summary Get Call Metrics Trends
 */
export const useMetricsGetCallMetricsTrends = <TData = Awaited<ReturnType<typeof metricsGetCallMetricsTrends>>, TError = HTTPValidationError>(
 params: MetricsGetCallMetricsTrendsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof metricsGetCallMetricsTrends>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getMetricsGetCallMetricsTrendsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



