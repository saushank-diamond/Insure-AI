/**
 * Generated by orval v6.26.0 üç∫
 * Do not edit manually.
 * insureai
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  HTTPValidationError,
  Token,
  User,
  UserLoginRequest,
  UserRegisterRequest
} from '.././schemas'
import { customInstance } from '.././mutator/axios';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * Register a new user account.

Args:
- req: UserRegisterRequest object containing the user's registration details.
- user_service: Instance of UserService for user-related operations.
- organization_service: Instance of OrganizationService for organization-related operations.

Returns:
- Token: Access token for the registered user.
 * @summary Register
 */
export const authenticationRegister = (
    userRegisterRequest: UserRegisterRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<Token>(
      {url: `/v1/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userRegisterRequest
    },
      options);
    }
  


export const getAuthenticationRegisterMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authenticationRegister>>, TError,{data: UserRegisterRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof authenticationRegister>>, TError,{data: UserRegisterRequest}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authenticationRegister>>, {data: UserRegisterRequest}> = (props) => {
          const {data} = props ?? {};

          return  authenticationRegister(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthenticationRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof authenticationRegister>>>
    export type AuthenticationRegisterMutationBody = UserRegisterRequest
    export type AuthenticationRegisterMutationError = HTTPValidationError

    /**
 * @summary Register
 */
export const useAuthenticationRegister = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authenticationRegister>>, TError,{data: UserRegisterRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof authenticationRegister>>,
        TError,
        {data: UserRegisterRequest},
        TContext
      > => {

      const mutationOptions = getAuthenticationRegisterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Authenticates a user and generates an access token.

Args:
    req (UserLoginRequest): The user login request object containing email and password.
    user_service (UserService): The user service instance.
    organization_service (OrganizationService): The organization service instance.

Returns:
    Token: The access token object containing the generated access token and token type.
 * @summary Login
 */
export const authenticationLogin = (
    userLoginRequest: UserLoginRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<Token>(
      {url: `/v1/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userLoginRequest
    },
      options);
    }
  


export const getAuthenticationLoginMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authenticationLogin>>, TError,{data: UserLoginRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof authenticationLogin>>, TError,{data: UserLoginRequest}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authenticationLogin>>, {data: UserLoginRequest}> = (props) => {
          const {data} = props ?? {};

          return  authenticationLogin(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthenticationLoginMutationResult = NonNullable<Awaited<ReturnType<typeof authenticationLogin>>>
    export type AuthenticationLoginMutationBody = UserLoginRequest
    export type AuthenticationLoginMutationError = HTTPValidationError

    /**
 * @summary Login
 */
export const useAuthenticationLogin = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authenticationLogin>>, TError,{data: UserLoginRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof authenticationLogin>>,
        TError,
        {data: UserLoginRequest},
        TContext
      > => {

      const mutationOptions = getAuthenticationLoginMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Me
 */
export const authenticationGetMe = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<User>(
      {url: `/v1/me`, method: 'GET', signal
    },
      options);
    }
  

export const getAuthenticationGetMeQueryKey = () => {
    return [`/v1/me`] as const;
    }

    
export const getAuthenticationGetMeQueryOptions = <TData = Awaited<ReturnType<typeof authenticationGetMe>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authenticationGetMe>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAuthenticationGetMeQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof authenticationGetMe>>> = ({ signal }) => authenticationGetMe(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof authenticationGetMe>>, TError, TData> & { queryKey: QueryKey }
}

export type AuthenticationGetMeQueryResult = NonNullable<Awaited<ReturnType<typeof authenticationGetMe>>>
export type AuthenticationGetMeQueryError = unknown

/**
 * @summary Get Me
 */
export const useAuthenticationGetMe = <TData = Awaited<ReturnType<typeof authenticationGetMe>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authenticationGetMe>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getAuthenticationGetMeQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



