/**
 * Generated by orval v6.26.0 üç∫
 * Do not edit manually.
 * insureai
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  CreateLeadRequest,
  HTTPValidationError,
  LeadsGetLeadsParams,
  UpdateLeadRequest
} from '.././schemas'
import { customInstance } from '.././mutator/axios';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * Create a new lead and associated profile.

Args:
    req (CreateLeadRequest): The request object containing lead information.
    user_ctx (UserContextDep): The user context dependency.
    lead_service (LeadServiceDep): The lead service dependency.
    agent_service (AgentServiceDep): The agent service dependency.
    retell_service (RetellAIServiceDep): The retell AI service dependency.

Returns:
    LeadResponse: The response object containing the created lead and profile.
 * @summary Create Lead
 */
export const leadsCreateLead = (
    createLeadRequest: CreateLeadRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/leads`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createLeadRequest
    },
      options);
    }
  


export const getLeadsCreateLeadMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof leadsCreateLead>>, TError,{data: CreateLeadRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof leadsCreateLead>>, TError,{data: CreateLeadRequest}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof leadsCreateLead>>, {data: CreateLeadRequest}> = (props) => {
          const {data} = props ?? {};

          return  leadsCreateLead(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LeadsCreateLeadMutationResult = NonNullable<Awaited<ReturnType<typeof leadsCreateLead>>>
    export type LeadsCreateLeadMutationBody = CreateLeadRequest
    export type LeadsCreateLeadMutationError = HTTPValidationError

    /**
 * @summary Create Lead
 */
export const useLeadsCreateLead = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof leadsCreateLead>>, TError,{data: CreateLeadRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof leadsCreateLead>>,
        TError,
        {data: CreateLeadRequest},
        TContext
      > => {

      const mutationOptions = getLeadsCreateLeadMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Retrieve leads for a specific branch.

Args:
    branch_id (str): The ID of the branch.
    user_ctx (UserContextDep): The user context dependency.
    lead_service (LeadServiceDep): The lead service dependency.

Returns:
    List[LeadResponse]: A list of LeadResponse objects representing the leads for the branch.
 * @summary Get Leads
 */
export const leadsGetLeads = (
    params: LeadsGetLeadsParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/leads`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getLeadsGetLeadsQueryKey = (params: LeadsGetLeadsParams,) => {
    return [`/v1/leads`, ...(params ? [params]: [])] as const;
    }

    
export const getLeadsGetLeadsQueryOptions = <TData = Awaited<ReturnType<typeof leadsGetLeads>>, TError = HTTPValidationError>(params: LeadsGetLeadsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof leadsGetLeads>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getLeadsGetLeadsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof leadsGetLeads>>> = ({ signal }) => leadsGetLeads(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof leadsGetLeads>>, TError, TData> & { queryKey: QueryKey }
}

export type LeadsGetLeadsQueryResult = NonNullable<Awaited<ReturnType<typeof leadsGetLeads>>>
export type LeadsGetLeadsQueryError = HTTPValidationError

/**
 * @summary Get Leads
 */
export const useLeadsGetLeads = <TData = Awaited<ReturnType<typeof leadsGetLeads>>, TError = HTTPValidationError>(
 params: LeadsGetLeadsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof leadsGetLeads>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getLeadsGetLeadsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Update a lead and its associated profile.

Args:
    lead_id (str): The ID of the lead to update.
    req (UpdateLeadRequest): The request object containing the updated lead and profile data.
    user_ctx (UserContextDep): The user context dependency.
    lead_service (LeadServiceDep): The lead service dependency.

Returns:
    dict: A dictionary containing the updated lead and profile.

Raises:
    CustomException: If the lead is not found.
 * @summary Update Lead
 */
export const leadsUpdateLead = (
    leadId: string,
    updateLeadRequest: UpdateLeadRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/leads/${leadId}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: updateLeadRequest
    },
      options);
    }
  


export const getLeadsUpdateLeadMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof leadsUpdateLead>>, TError,{leadId: string;data: UpdateLeadRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof leadsUpdateLead>>, TError,{leadId: string;data: UpdateLeadRequest}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof leadsUpdateLead>>, {leadId: string;data: UpdateLeadRequest}> = (props) => {
          const {leadId,data} = props ?? {};

          return  leadsUpdateLead(leadId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LeadsUpdateLeadMutationResult = NonNullable<Awaited<ReturnType<typeof leadsUpdateLead>>>
    export type LeadsUpdateLeadMutationBody = UpdateLeadRequest
    export type LeadsUpdateLeadMutationError = HTTPValidationError

    /**
 * @summary Update Lead
 */
export const useLeadsUpdateLead = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof leadsUpdateLead>>, TError,{leadId: string;data: UpdateLeadRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof leadsUpdateLead>>,
        TError,
        {leadId: string;data: UpdateLeadRequest},
        TContext
      > => {

      const mutationOptions = getLeadsUpdateLeadMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Retrieve a lead by its ID.

Args:
    lead_id (str): The ID of the lead to retrieve.
    user_ctx (UserContextDep): The user context dependency.
    lead_service (LeadServiceDep): The lead service dependency.

Returns:
    LeadResponse: The response object containing the lead.

Raises:
    CustomException: If the lead is not found.
 * @summary Get Lead
 */
export const leadsGetLead = (
    leadId: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/leads/${leadId}`, method: 'GET', signal
    },
      options);
    }
  

export const getLeadsGetLeadQueryKey = (leadId: string,) => {
    return [`/v1/leads/${leadId}`] as const;
    }

    
export const getLeadsGetLeadQueryOptions = <TData = Awaited<ReturnType<typeof leadsGetLead>>, TError = HTTPValidationError>(leadId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof leadsGetLead>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getLeadsGetLeadQueryKey(leadId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof leadsGetLead>>> = ({ signal }) => leadsGetLead(leadId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(leadId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof leadsGetLead>>, TError, TData> & { queryKey: QueryKey }
}

export type LeadsGetLeadQueryResult = NonNullable<Awaited<ReturnType<typeof leadsGetLead>>>
export type LeadsGetLeadQueryError = HTTPValidationError

/**
 * @summary Get Lead
 */
export const useLeadsGetLead = <TData = Awaited<ReturnType<typeof leadsGetLead>>, TError = HTTPValidationError>(
 leadId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof leadsGetLead>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getLeadsGetLeadQueryOptions(leadId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Delete a lead by its ID.

Args:
    lead_id (str): The ID of the lead to delete.
    user_ctx (UserContextDep): The user context dependency.
    lead_service (LeadServiceDep): The lead service dependency.

Returns:
    DeleteResponse: The response indicating whether the lead was successfully deleted.
 * @summary Delete Lead
 */
export const leadsDeleteLead = (
    leadId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/leads/${leadId}`, method: 'DELETE'
    },
      options);
    }
  


export const getLeadsDeleteLeadMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof leadsDeleteLead>>, TError,{leadId: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof leadsDeleteLead>>, TError,{leadId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof leadsDeleteLead>>, {leadId: string}> = (props) => {
          const {leadId} = props ?? {};

          return  leadsDeleteLead(leadId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LeadsDeleteLeadMutationResult = NonNullable<Awaited<ReturnType<typeof leadsDeleteLead>>>
    
    export type LeadsDeleteLeadMutationError = HTTPValidationError

    /**
 * @summary Delete Lead
 */
export const useLeadsDeleteLead = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof leadsDeleteLead>>, TError,{leadId: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof leadsDeleteLead>>,
        TError,
        {leadId: string},
        TContext
      > => {

      const mutationOptions = getLeadsDeleteLeadMutationOptions(options);

      return useMutation(mutationOptions);
    }
    