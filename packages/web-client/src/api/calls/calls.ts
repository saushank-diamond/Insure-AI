/**
 * Generated by orval v6.26.0 üç∫
 * Do not edit manually.
 * insureai
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  CallResponse,
  CallsGetCallsParams,
  CreateCallRequest,
  HTTPValidationError,
  RegisterCallResponse
} from '.././schemas'
import { customInstance } from '.././mutator/axios';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Create Call
 */
export const callsCreateCall = (
    createCallRequest: CreateCallRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<RegisterCallResponse>(
      {url: `/v1/calls`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createCallRequest
    },
      options);
    }
  


export const getCallsCreateCallMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof callsCreateCall>>, TError,{data: CreateCallRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof callsCreateCall>>, TError,{data: CreateCallRequest}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof callsCreateCall>>, {data: CreateCallRequest}> = (props) => {
          const {data} = props ?? {};

          return  callsCreateCall(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CallsCreateCallMutationResult = NonNullable<Awaited<ReturnType<typeof callsCreateCall>>>
    export type CallsCreateCallMutationBody = CreateCallRequest
    export type CallsCreateCallMutationError = HTTPValidationError

    /**
 * @summary Create Call
 */
export const useCallsCreateCall = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof callsCreateCall>>, TError,{data: CreateCallRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof callsCreateCall>>,
        TError,
        {data: CreateCallRequest},
        TContext
      > => {

      const mutationOptions = getCallsCreateCallMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Retrieve calls for a specific branch.

Args:
    branch_id (str): The ID of the branch.
    user_ctx (UserContextDep): The user context.
    call_service (CallServiceDep): The call service.

Returns:
    List[Call]: The list of calls for the branch.
 * @summary Get Calls
 */
export const callsGetCalls = (
    params: CallsGetCallsParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<CallResponse[]>(
      {url: `/v1/calls`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getCallsGetCallsQueryKey = (params: CallsGetCallsParams,) => {
    return [`/v1/calls`, ...(params ? [params]: [])] as const;
    }

    
export const getCallsGetCallsQueryOptions = <TData = Awaited<ReturnType<typeof callsGetCalls>>, TError = HTTPValidationError>(params: CallsGetCallsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof callsGetCalls>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCallsGetCallsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof callsGetCalls>>> = ({ signal }) => callsGetCalls(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof callsGetCalls>>, TError, TData> & { queryKey: QueryKey }
}

export type CallsGetCallsQueryResult = NonNullable<Awaited<ReturnType<typeof callsGetCalls>>>
export type CallsGetCallsQueryError = HTTPValidationError

/**
 * @summary Get Calls
 */
export const useCallsGetCalls = <TData = Awaited<ReturnType<typeof callsGetCalls>>, TError = HTTPValidationError>(
 params: CallsGetCallsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof callsGetCalls>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getCallsGetCallsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Call Report
 */
export const callsGetCallReport = (
    callId: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/calls/${callId}/report`, method: 'GET', signal
    },
      options);
    }
  

export const getCallsGetCallReportQueryKey = (callId: string,) => {
    return [`/v1/calls/${callId}/report`] as const;
    }

    
export const getCallsGetCallReportQueryOptions = <TData = Awaited<ReturnType<typeof callsGetCallReport>>, TError = HTTPValidationError>(callId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof callsGetCallReport>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCallsGetCallReportQueryKey(callId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof callsGetCallReport>>> = ({ signal }) => callsGetCallReport(callId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(callId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof callsGetCallReport>>, TError, TData> & { queryKey: QueryKey }
}

export type CallsGetCallReportQueryResult = NonNullable<Awaited<ReturnType<typeof callsGetCallReport>>>
export type CallsGetCallReportQueryError = HTTPValidationError

/**
 * @summary Get Call Report
 */
export const useCallsGetCallReport = <TData = Awaited<ReturnType<typeof callsGetCallReport>>, TError = HTTPValidationError>(
 callId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof callsGetCallReport>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getCallsGetCallReportQueryOptions(callId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Call
 */
export const callsGetCall = (
    callId: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/calls/${callId}`, method: 'GET', signal
    },
      options);
    }
  

export const getCallsGetCallQueryKey = (callId: string,) => {
    return [`/v1/calls/${callId}`] as const;
    }

    
export const getCallsGetCallQueryOptions = <TData = Awaited<ReturnType<typeof callsGetCall>>, TError = HTTPValidationError>(callId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof callsGetCall>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCallsGetCallQueryKey(callId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof callsGetCall>>> = ({ signal }) => callsGetCall(callId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(callId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof callsGetCall>>, TError, TData> & { queryKey: QueryKey }
}

export type CallsGetCallQueryResult = NonNullable<Awaited<ReturnType<typeof callsGetCall>>>
export type CallsGetCallQueryError = HTTPValidationError

/**
 * @summary Get Call
 */
export const useCallsGetCall = <TData = Awaited<ReturnType<typeof callsGetCall>>, TError = HTTPValidationError>(
 callId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof callsGetCall>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getCallsGetCallQueryOptions(callId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Download
 */
export const callsDownload = (
    callId: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/calls/${callId}/download`, method: 'GET', signal
    },
      options);
    }
  

export const getCallsDownloadQueryKey = (callId: string,) => {
    return [`/v1/calls/${callId}/download`] as const;
    }

    
export const getCallsDownloadQueryOptions = <TData = Awaited<ReturnType<typeof callsDownload>>, TError = HTTPValidationError>(callId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof callsDownload>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCallsDownloadQueryKey(callId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof callsDownload>>> = ({ signal }) => callsDownload(callId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(callId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof callsDownload>>, TError, TData> & { queryKey: QueryKey }
}

export type CallsDownloadQueryResult = NonNullable<Awaited<ReturnType<typeof callsDownload>>>
export type CallsDownloadQueryError = HTTPValidationError

/**
 * @summary Download
 */
export const useCallsDownload = <TData = Awaited<ReturnType<typeof callsDownload>>, TError = HTTPValidationError>(
 callId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof callsDownload>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getCallsDownloadQueryOptions(callId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



