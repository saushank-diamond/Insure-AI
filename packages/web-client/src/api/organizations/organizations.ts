/**
 * Generated by orval v6.26.0 üç∫
 * Do not edit manually.
 * insureai
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  CreateBranchInviteRequest,
  CreateBranchRequest,
  HTTPValidationError,
  Invite,
  ModifyMemberAccessRequest,
  UserResponse
} from '.././schemas'
import { customInstance } from '.././mutator/axios';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * Create a new branch for an organization.

Args:
    req (CreateBranchRequest): The request object containing branch details.
    user_ctx (UserContext): The user context object.
    organization_service (OrganizationService): The organization service.

Returns:
    Branch: The response object containing the created branch details.
 * @summary Create Branch
 */
export const organizationsCreateBranch = (
    createBranchRequest: CreateBranchRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/branches`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createBranchRequest
    },
      options);
    }
  


export const getOrganizationsCreateBranchMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof organizationsCreateBranch>>, TError,{data: CreateBranchRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof organizationsCreateBranch>>, TError,{data: CreateBranchRequest}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof organizationsCreateBranch>>, {data: CreateBranchRequest}> = (props) => {
          const {data} = props ?? {};

          return  organizationsCreateBranch(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrganizationsCreateBranchMutationResult = NonNullable<Awaited<ReturnType<typeof organizationsCreateBranch>>>
    export type OrganizationsCreateBranchMutationBody = CreateBranchRequest
    export type OrganizationsCreateBranchMutationError = HTTPValidationError

    /**
 * @summary Create Branch
 */
export const useOrganizationsCreateBranch = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof organizationsCreateBranch>>, TError,{data: CreateBranchRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof organizationsCreateBranch>>,
        TError,
        {data: CreateBranchRequest},
        TContext
      > => {

      const mutationOptions = getOrganizationsCreateBranchMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Get the members of a branch.

Args:
    branch_id (str): The ID of the branch.
    user_ctx (UserContextDep): The user context dependency.
    organization_service (OrganizationServiceDep): The organization service dependency.

Returns:
    list[User]: A list of users who are members of the branch.
 * @summary Get Branch Members
 */
export const organizationsGetBranchMembers = (
    branchId: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<UserResponse[]>(
      {url: `/v1/branches/${branchId}/members`, method: 'GET', signal
    },
      options);
    }
  

export const getOrganizationsGetBranchMembersQueryKey = (branchId: string,) => {
    return [`/v1/branches/${branchId}/members`] as const;
    }

    
export const getOrganizationsGetBranchMembersQueryOptions = <TData = Awaited<ReturnType<typeof organizationsGetBranchMembers>>, TError = HTTPValidationError>(branchId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof organizationsGetBranchMembers>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOrganizationsGetBranchMembersQueryKey(branchId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof organizationsGetBranchMembers>>> = ({ signal }) => organizationsGetBranchMembers(branchId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(branchId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof organizationsGetBranchMembers>>, TError, TData> & { queryKey: QueryKey }
}

export type OrganizationsGetBranchMembersQueryResult = NonNullable<Awaited<ReturnType<typeof organizationsGetBranchMembers>>>
export type OrganizationsGetBranchMembersQueryError = HTTPValidationError

/**
 * @summary Get Branch Members
 */
export const useOrganizationsGetBranchMembers = <TData = Awaited<ReturnType<typeof organizationsGetBranchMembers>>, TError = HTTPValidationError>(
 branchId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof organizationsGetBranchMembers>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getOrganizationsGetBranchMembersQueryOptions(branchId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Get the invites for a branch.

Args:
    branch_id (str): The ID of the branch.
    user_ctx (UserContextDep): The user context dependency.
    organization_service (OrganizationServiceDep): The organization service dependency.

Returns:
    list[Invite]: A list of invites for the branch.
 * @summary Get Branch Invites
 */
export const organizationsGetBranchInvites = (
    branchId: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Invite[]>(
      {url: `/v1/branches/${branchId}/invites`, method: 'GET', signal
    },
      options);
    }
  

export const getOrganizationsGetBranchInvitesQueryKey = (branchId: string,) => {
    return [`/v1/branches/${branchId}/invites`] as const;
    }

    
export const getOrganizationsGetBranchInvitesQueryOptions = <TData = Awaited<ReturnType<typeof organizationsGetBranchInvites>>, TError = HTTPValidationError>(branchId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof organizationsGetBranchInvites>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOrganizationsGetBranchInvitesQueryKey(branchId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof organizationsGetBranchInvites>>> = ({ signal }) => organizationsGetBranchInvites(branchId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(branchId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof organizationsGetBranchInvites>>, TError, TData> & { queryKey: QueryKey }
}

export type OrganizationsGetBranchInvitesQueryResult = NonNullable<Awaited<ReturnType<typeof organizationsGetBranchInvites>>>
export type OrganizationsGetBranchInvitesQueryError = HTTPValidationError

/**
 * @summary Get Branch Invites
 */
export const useOrganizationsGetBranchInvites = <TData = Awaited<ReturnType<typeof organizationsGetBranchInvites>>, TError = HTTPValidationError>(
 branchId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof organizationsGetBranchInvites>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getOrganizationsGetBranchInvitesQueryOptions(branchId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Create an invite for a branch.

Args:
    branch_id (str): The ID of the branch.
    user_ctx (UserContextDep): The user context dependency.
    organization_service (OrganizationServiceDep): The organization service dependency.

Returns:
    Invite: The created invite.
 * @summary Create Branch Invite
 */
export const organizationsCreateBranchInvite = (
    branchId: string,
    createBranchInviteRequest: CreateBranchInviteRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<Invite>(
      {url: `/v1/branches/${branchId}/invites`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createBranchInviteRequest
    },
      options);
    }
  


export const getOrganizationsCreateBranchInviteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof organizationsCreateBranchInvite>>, TError,{branchId: string;data: CreateBranchInviteRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof organizationsCreateBranchInvite>>, TError,{branchId: string;data: CreateBranchInviteRequest}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof organizationsCreateBranchInvite>>, {branchId: string;data: CreateBranchInviteRequest}> = (props) => {
          const {branchId,data} = props ?? {};

          return  organizationsCreateBranchInvite(branchId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrganizationsCreateBranchInviteMutationResult = NonNullable<Awaited<ReturnType<typeof organizationsCreateBranchInvite>>>
    export type OrganizationsCreateBranchInviteMutationBody = CreateBranchInviteRequest
    export type OrganizationsCreateBranchInviteMutationError = HTTPValidationError

    /**
 * @summary Create Branch Invite
 */
export const useOrganizationsCreateBranchInvite = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof organizationsCreateBranchInvite>>, TError,{branchId: string;data: CreateBranchInviteRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof organizationsCreateBranchInvite>>,
        TError,
        {branchId: string;data: CreateBranchInviteRequest},
        TContext
      > => {

      const mutationOptions = getOrganizationsCreateBranchInviteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Modify Member Access
 */
export const organizationsModifyMemberAccess = (
    branchId: string,
    memberId: string,
    modifyMemberAccessRequest: ModifyMemberAccessRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/branches/${branchId}/members/${memberId}/access`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: modifyMemberAccessRequest
    },
      options);
    }
  


export const getOrganizationsModifyMemberAccessMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof organizationsModifyMemberAccess>>, TError,{branchId: string;memberId: string;data: ModifyMemberAccessRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof organizationsModifyMemberAccess>>, TError,{branchId: string;memberId: string;data: ModifyMemberAccessRequest}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof organizationsModifyMemberAccess>>, {branchId: string;memberId: string;data: ModifyMemberAccessRequest}> = (props) => {
          const {branchId,memberId,data} = props ?? {};

          return  organizationsModifyMemberAccess(branchId,memberId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrganizationsModifyMemberAccessMutationResult = NonNullable<Awaited<ReturnType<typeof organizationsModifyMemberAccess>>>
    export type OrganizationsModifyMemberAccessMutationBody = ModifyMemberAccessRequest
    export type OrganizationsModifyMemberAccessMutationError = HTTPValidationError

    /**
 * @summary Modify Member Access
 */
export const useOrganizationsModifyMemberAccess = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof organizationsModifyMemberAccess>>, TError,{branchId: string;memberId: string;data: ModifyMemberAccessRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof organizationsModifyMemberAccess>>,
        TError,
        {branchId: string;memberId: string;data: ModifyMemberAccessRequest},
        TContext
      > => {

      const mutationOptions = getOrganizationsModifyMemberAccessMutationOptions(options);

      return useMutation(mutationOptions);
    }
    