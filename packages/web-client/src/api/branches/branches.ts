/**
 * Generated by orval v6.26.0 üç∫
 * Do not edit manually.
 * refreshmint backend
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import type {
  CreateBranchRequest,
  HTTPValidationError
} from '.././schemas'
import { customInstance } from '.././mutator/axios';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * Create a new branch for an organization.

Args:
    req (CreateBranchRequest): The request object containing branch details.
    user_ctx (UserContext): The user context object.
    organization_service (OrganizationService): The organization service.

Returns:
    Branch: The response object containing the created branch details.
 * @summary Create Branch
 */
export const branchesCreateBranch = (
    createBranchRequest: CreateBranchRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/branches`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createBranchRequest
    },
      options);
    }
  


export const getBranchesCreateBranchMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof branchesCreateBranch>>, TError,{data: CreateBranchRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof branchesCreateBranch>>, TError,{data: CreateBranchRequest}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof branchesCreateBranch>>, {data: CreateBranchRequest}> = (props) => {
          const {data} = props ?? {};

          return  branchesCreateBranch(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type BranchesCreateBranchMutationResult = NonNullable<Awaited<ReturnType<typeof branchesCreateBranch>>>
    export type BranchesCreateBranchMutationBody = CreateBranchRequest
    export type BranchesCreateBranchMutationError = HTTPValidationError

    /**
 * @summary Create Branch
 */
export const useBranchesCreateBranch = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof branchesCreateBranch>>, TError,{data: CreateBranchRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof branchesCreateBranch>>,
        TError,
        {data: CreateBranchRequest},
        TContext
      > => {

      const mutationOptions = getBranchesCreateBranchMutationOptions(options);

      return useMutation(mutationOptions);
    }
    